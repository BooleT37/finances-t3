// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "prisma-zod-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  setupDone      Boolean          @default(false)
  accounts       Account[]
  sessions       Session[]
  settings       UserSetting?
  Category       Category[]
  Source         Source[]
  SavingSpending SavingSpending[]
  Subscription   Subscription[]
  Expense        Expense[]
  Forecast       Forecast[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Subcategory {
  id         Int       @id @default(autoincrement())
  name       String
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?
  expenses   Expense[]
}

enum CategoryType {
  PERSONAL_EXPENSE
  FROM_SAVINGS
  TO_SAVINGS
  RENT
}

model Category {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  isIncome      Boolean        @default(false)
  isContinuous  Boolean        @default(false)
  shortname     String         @db.VarChar(16)
  type          CategoryType?
  expenses      Expense[]
  subcategories Subcategory[]
  Subscriptions Subscription[]
  forecast      Forecast[]
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @default("clg6kpbtn0000mr081ntz0f8i")
}

model Source {
  id            Int            @id @default(autoincrement())
  name          String
  subscriptions Subscription[]
  expenses      Expense[]
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @default("clg6kpbtn0000mr081ntz0f8i")
}

model SavingSpending {
  id         Int                      @id @default(autoincrement())
  name       String
  completed  Boolean
  categories SavingSpendingCategory[]
  user       User                     @relation(fields: [userId], references: [id])
  userId     String                   @default("clg6kpbtn0000mr081ntz0f8i")
}

model SavingSpendingCategory {
  id               Int             @id @default(autoincrement())
  name             String
  forecast         Float
  comment          String
  savingSpending   SavingSpending? @relation(fields: [savingSpendingId], references: [id], onDelete: Cascade)
  savingSpendingId Int?
  expenses         Expense[]
}

model Subscription {
  id         Int       @id @default(autoincrement())
  name       String
  cost       Float
  category   Category  @relation(fields: [categoryId], references: [id])
  period     Int       @db.SmallInt
  firstDate  DateTime  @db.Date
  source     Source?   @relation(fields: [sourceId], references: [id])
  active     Boolean
  categoryId Int
  sourceId   Int?
  Expenses   Expense[]
  user       User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  userId     String    @default("clg6kpbtn0000mr081ntz0f8i")
}

model Expense {
  id                       Int                     @id @default(autoincrement())
  name                     String
  cost                     Float
  date                     DateTime                @db.Date
  category                 Category                @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId               Int
  subcategory              Subcategory?            @relation(fields: [subcategoryId], references: [id])
  personalExpense          Expense?                @relation("personalExpenseLink", fields: [personalExpenseId], references: [id])
  parentExpense            Expense?                @relation("personalExpenseLink")
  personalExpenseId        Int?                    @unique
  source                   Source?                 @relation(fields: [sourceId], references: [id])
  sourceId                 Int?
  subscription             Subscription?           @relation(fields: [subscriptionId], references: [id])
  subscriptionId           Int?
  savingSpendingCategory   SavingSpendingCategory? @relation(fields: [savingSpendingCategoryId], references: [id])
  savingSpendingCategoryId Int?
  subcategoryId            Int?
  user                     User                    @relation(fields: [userId], references: [id])
  userId                   String                  @default("clg6kpbtn0000mr081ntz0f8i")
}

model Forecast {
  id         Int      @id @default(autoincrement())
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  categoryId Int
  month      Int      @db.SmallInt
  year       Int      @db.SmallInt
  sum        Int      @default(0) @db.SmallInt
  comment    String   @default("")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @default("clg6kpbtn0000mr081ntz0f8i")

  @@unique([categoryId, month, year, userId])
}

model UserSetting {
  id                     Int       @id @default(autoincrement())
  pePerMonth             Int       @default(50)
  savings                Float?
  savingsDate            DateTime? @db.Date
  User                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String    @unique
  incomeCategoriesOrder  Int[]     @default([])
  expenseCategoriesOrder Int[]     @default([])
}
